from datetime import datetime, timedelta
from django.db import models
from django.contrib.auth.models import AbstractUser, Group, Permission
import pytz
from rest_framework.authtoken.models import Token

from user.query_manager import CustomManager, UserManager

class DefaultModel(models.Model):
    status = models.BooleanField(default=True)
    valid_till = models.DateField(default=datetime.now(pytz.utc)+timedelta(days=365))
    created_at = models.DateTimeField(auto_now_add=True)
    last_updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        abstract = True

class Customer(DefaultModel, models.Model):
    id = models.AutoField(primary_key=True)
    code = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    address = models.TextField()
    comments = models.TextField()
    last_updated_by = models.CharField(max_length=255)
    logo = models.URLField(blank=True, null=True)

    def __str__(self):
        return f"{self.code} - {self.name}"
    
class CustomerConfig(DefaultModel, models.Model):
    id = models.AutoField(primary_key=True)
    customer = models.OneToOneField(Customer, related_name = "customer_config", on_delete=models.CASCADE)
    config_type = models.CharField(max_length=255)
    config_value = models.CharField(max_length=255)
    comments = models.TextField()
    last_updated_by = models.CharField(max_length=255)

    objects = CustomManager()

    def __str__(self):
        return f"{self.customer.code} - {self.config_type}"
    
class AccessType(DefaultModel, models.Model):
    id = models.AutoField(primary_key=True)
    access = models.CharField(max_length=255)
    description = models.TextField()
    comments = models.TextField()
    last_updated_by = models.CharField(max_length=255)

    objects = CustomManager()

    def __str__(self):
        return f"{self.access} - {self.description}"

class Roles(models.Model):
    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=255, unique=True)
    group = models.ManyToManyField(Group, related_name='roles')

    def __str__(self):
        return self.name

class User(DefaultModel, AbstractUser):
    customer = models.ForeignKey(Customer, related_name = "user", on_delete=models.CASCADE, default=1)
    comments = models.TextField()
    last_updated_by = models.CharField(max_length=255)
    role_name = models.CharField(max_length=255, default = "user")
    role = models.ForeignKey(Roles, related_name = "user", on_delete=models.CASCADE)
    avatar = models.URLField(blank=True, null=True)

    objects = UserManager()

    def __str__(self):
        return f"{self.customer.code} - {self.username}"

class UserAccess(DefaultModel, models.Model):
    id = models.AutoField(primary_key=True)
    customer = models.ForeignKey(Customer, related_name = "user_access", on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    access_type = models.ForeignKey(AccessType, on_delete=models.CASCADE)
    comments = models.TextField()
    last_updated_by = models.CharField(max_length=255)

    objects = CustomManager()

    def __str__(self):
        return f"{self.customer.code} - {self.user.username} - {self.access_type.access}"


class RequestTracking(DefaultModel, models.Model):
    id = models.AutoField(primary_key=True)
    request_id = models.CharField(max_length=100, unique=True)  # UUID generated by middleware
    start_time = models.DateTimeField(auto_now_add=True)
    end_time = models.DateTimeField(auto_now=True)
    created_by = models.ForeignKey(User, related_name="request_tracking", on_delete=models.CASCADE, default=2)
    time_taken = models.FloatField(null=True, blank=True)  # In seconds
    api = models.CharField(max_length=255)
    payload = models.TextField(null=True, blank=True)
    request_method = models.CharField(max_length=10)
    status_code = models.CharField(max_length=50)
    error_message = models.TextField(null=True, blank=True)  # New column for error message

    def save(self, *args, **kwargs):
        # Calculate time_taken before saving
        self.end_time = datetime.now(pytz.utc)
        if self.start_time and self.end_time:
            self.time_taken = (self.end_time - self.start_time).total_seconds()
        super().save(*args, **kwargs)

    def __str__(self):
        return f"RequestTracking: {self.request_id}"