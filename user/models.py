from django.db import models
from django.contrib.auth.models import AbstractUser
from rest_framework.authtoken.models import Token


class Customer(models.Model):
    id = models.AutoField(primary_key=True)
    code = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    address = models.TextField()
    status = models.BooleanField(max_length=50)
    valid_till = models.DateField(null=True, blank=True)
    comments = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    last_updated_at = models.DateTimeField(auto_now=True)
    last_updated_by = models.CharField(max_length=255)

    def __str__(self):
        return f"{self.code} - {self.name}"
    
class CustomerConfig(models.Model):
    id = models.AutoField(primary_key=True)
    customer = models.OneToOneField(Customer, related_name = "customer_config", on_delete=models.CASCADE)
    config_type = models.CharField(max_length=255)
    config_value = models.CharField(max_length=255)
    status = models.BooleanField(max_length=50)
    valid_till = models.DateField(null=True, blank=True)
    comments = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    last_updated_at = models.DateTimeField(auto_now=True)
    last_updated_by = models.CharField(max_length=255)

    def __str__(self):
        return f"{self.customer.code} - {self.config_type}"
    
class AccessType(models.Model):
    id = models.AutoField(primary_key=True)
    access = models.CharField(max_length=255)
    description = models.TextField()
    status = models.BooleanField()
    valid_till = models.DateField(null=True, blank=True)
    comments = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    last_updated_at = models.DateTimeField(auto_now=True)
    last_updated_by = models.CharField(max_length=255)

    def __str__(self):
        return f"{self.access} - {self.description}"

class User(AbstractUser):
    customer = models.ForeignKey(Customer, related_name = "user", on_delete=models.CASCADE, default=1)
    valid_till = models.DateField(null=True, blank=True)
    comments = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    last_updated_at = models.DateTimeField(auto_now=True)
    last_updated_by = models.CharField(max_length=255)

    def __str__(self):
        return f"{self.customer.code} - {self.username}"

class UserAccess(models.Model):
    id = models.AutoField(primary_key=True)
    customer = models.ForeignKey(Customer, related_name = "user_access", on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    access_type = models.ForeignKey(AccessType, on_delete=models.CASCADE)
    status = models.BooleanField()
    valid_till = models.DateField(null=True, blank=True)
    comments = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    last_updated_at = models.DateTimeField(auto_now=True)
    last_updated_by = models.CharField(max_length=255)

    def __str__(self):
        return f"{self.customer.code} - {self.user.username} - {self.access_type.access}"


class RequestTracking(models.Model):
    id = models.AutoField(primary_key=True)
    request_id = models.CharField(max_length=100)  # UUID generated by middleware
    start_time = models.DateTimeField(auto_now_add=True)
    end_time = models.DateTimeField(auto_now=True)
    created_by = models.CharField(max_length=200, null=True, blank=True)  # Adjust max_length as needed
    time_taken = models.FloatField(null=True, blank=True)  # In seconds
    api = models.CharField(max_length=255)
    payload = models.TextField(null=True, blank=True)
    request_method = models.CharField(max_length=10)
    status = models.CharField(max_length=50)
    error_message = models.TextField(null=True, blank=True)  # New column for error message

    def save(self, *args, **kwargs):
        # Calculate time_taken before saving
        if self.start_time and self.end_time:
            self.time_taken = (self.end_time - self.start_time).total_seconds()
        super().save(*args, **kwargs)

    def __str__(self):
        return f"RequestTracking: {self.request_id}"
